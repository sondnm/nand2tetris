/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // RAM address of M
        pc[15];          // ROM address of next instruction

    PARTS:
    Not(in=instruction[15], out=Ains);
    Not(in=Ains, out=Cins);

    And(a=Cins, b=instruction[5], out=ALUtoA);
    Mux16(a=instruction, b=outALU, sel=ALUtoA, out=inA);

    Or(a=Ains, b=ALUtoA, out=writeA);
    ARegister(in=inA, load=writeA, out=outA, out[0..14]=addressM);

    And(a=Cins, b=instruction[12], out=loadAM);
    Mux16(a=outA, b=inM, sel=loadAM, out=outAM);

    And(a=Cins, b=instruction[4], out=writeD);
    DRegister(in=outALU, load=writeD, out=outD);

    ALU(
      x=outD, y=outAM,
      zx=instruction[11], nx=instruction[10],
      zy=instruction[9], ny=instruction[8],
      f=instruction[7], no=instruction[6],
      out=outALU, out=outM,
      zr=outzr, ng=outng
    );
    And(a=Cins, b=instruction[3], out=writeM);

    And(a=outzr, b=instruction[1], out=jeq);
    And(a=outng, b=instruction[2], out=jlt);
    Or(a=outzr, b=outng, out=zrorng);
    Not(in=zrorng, out=positive);
    And(a=positive, b=instruction[0], out=jgt);
    Or(a=jeq, b=jlt, out=jle);
    Or(a=jle, b=jgt, out=jmp);
    And(a=Cins, b=jmp, out=loadPC);
    Not(in=loadPC, out=incPC);

    PC(in=outA, load=loadPC, inc=incPC, reset=reset, out[0..14]=pc);
}
